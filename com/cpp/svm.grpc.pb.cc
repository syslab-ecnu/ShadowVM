// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: svm.proto

#include "svm.pb.h"
#include "svm.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ShadowVM {

static const char* Greeter_method_names[] = {
  "/ShadowVM.Greeter/SayHello",
  "/ShadowVM.Greeter/SayTest",
};

std::unique_ptr< Greeter::Stub> Greeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Greeter::Stub> stub(new Greeter::Stub(channel));
  return stub;
}

Greeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(Greeter_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SayTest_(Greeter_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Greeter::Stub::SayHello(::grpc::ClientContext* context, const ::ShadowVM::HelloRequest& request, ::ShadowVM::HelloReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void Greeter::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::ShadowVM::HelloRequest* request, ::ShadowVM::HelloReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ShadowVM::HelloReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ShadowVM::HelloReply>* Greeter::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::ShadowVM::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ShadowVM::HelloReply>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ShadowVM::HelloReply>* Greeter::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::ShadowVM::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ShadowVM::HelloReply>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, false);
}

::grpc::Status Greeter::Stub::SayTest(::grpc::ClientContext* context, const ::ShadowVM::TestRequest& request, ::ShadowVM::TestReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SayTest_, context, request, response);
}

void Greeter::Stub::experimental_async::SayTest(::grpc::ClientContext* context, const ::ShadowVM::TestRequest* request, ::ShadowVM::TestReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayTest_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::SayTest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ShadowVM::TestReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayTest_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ShadowVM::TestReply>* Greeter::Stub::AsyncSayTestRaw(::grpc::ClientContext* context, const ::ShadowVM::TestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ShadowVM::TestReply>::Create(channel_.get(), cq, rpcmethod_SayTest_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ShadowVM::TestReply>* Greeter::Stub::PrepareAsyncSayTestRaw(::grpc::ClientContext* context, const ::ShadowVM::TestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ShadowVM::TestReply>::Create(channel_.get(), cq, rpcmethod_SayTest_, context, request, false);
}

Greeter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::ShadowVM::HelloRequest, ::ShadowVM::HelloReply>(
          std::mem_fn(&Greeter::Service::SayHello), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::ShadowVM::TestRequest, ::ShadowVM::TestReply>(
          std::mem_fn(&Greeter::Service::SayTest), this)));
}

Greeter::Service::~Service() {
}

::grpc::Status Greeter::Service::SayHello(::grpc::ServerContext* context, const ::ShadowVM::HelloRequest* request, ::ShadowVM::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::SayTest(::grpc::ServerContext* context, const ::ShadowVM::TestRequest* request, ::ShadowVM::TestReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ShadowVMAPI_method_names[] = {
  "/ShadowVM.ShadowVMAPI/RunPipelineCMD",
};

std::unique_ptr< ShadowVMAPI::Stub> ShadowVMAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ShadowVMAPI::Stub> stub(new ShadowVMAPI::Stub(channel));
  return stub;
}

ShadowVMAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RunPipelineCMD_(ShadowVMAPI_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ShadowVMAPI::Stub::RunPipelineCMD(::grpc::ClientContext* context, const ::ShadowVM::PipelineInfo& request, ::ShadowVM::Ret* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RunPipelineCMD_, context, request, response);
}

void ShadowVMAPI::Stub::experimental_async::RunPipelineCMD(::grpc::ClientContext* context, const ::ShadowVM::PipelineInfo* request, ::ShadowVM::Ret* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RunPipelineCMD_, context, request, response, std::move(f));
}

void ShadowVMAPI::Stub::experimental_async::RunPipelineCMD(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ShadowVM::Ret* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RunPipelineCMD_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ShadowVM::Ret>* ShadowVMAPI::Stub::AsyncRunPipelineCMDRaw(::grpc::ClientContext* context, const ::ShadowVM::PipelineInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ShadowVM::Ret>::Create(channel_.get(), cq, rpcmethod_RunPipelineCMD_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ShadowVM::Ret>* ShadowVMAPI::Stub::PrepareAsyncRunPipelineCMDRaw(::grpc::ClientContext* context, const ::ShadowVM::PipelineInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ShadowVM::Ret>::Create(channel_.get(), cq, rpcmethod_RunPipelineCMD_, context, request, false);
}

ShadowVMAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShadowVMAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShadowVMAPI::Service, ::ShadowVM::PipelineInfo, ::ShadowVM::Ret>(
          std::mem_fn(&ShadowVMAPI::Service::RunPipelineCMD), this)));
}

ShadowVMAPI::Service::~Service() {
}

::grpc::Status ShadowVMAPI::Service::RunPipelineCMD(::grpc::ServerContext* context, const ::ShadowVM::PipelineInfo* request, ::ShadowVM::Ret* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ShadowVM

