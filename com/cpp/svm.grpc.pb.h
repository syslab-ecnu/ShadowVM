// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: svm.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_svm_2eproto__INCLUDED
#define GRPC_svm_2eproto__INCLUDED

#include "svm.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace ShadowVM {

// The greeting service definition.
class Greeter final {
 public:
  static constexpr char const* service_full_name() {
    return "ShadowVM.Greeter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::ShadowVM::HelloRequest& request, ::ShadowVM::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::ShadowVM::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::ShadowVM::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    virtual ::grpc::Status SayTest(::grpc::ClientContext* context, const ::ShadowVM::TestRequest& request, ::ShadowVM::TestReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::TestReply>> AsyncSayTest(::grpc::ClientContext* context, const ::ShadowVM::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::TestReply>>(AsyncSayTestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::TestReply>> PrepareAsyncSayTest(::grpc::ClientContext* context, const ::ShadowVM::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::TestReply>>(PrepareAsyncSayTestRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sends a greeting
      virtual void SayHello(::grpc::ClientContext* context, const ::ShadowVM::HelloRequest* request, ::ShadowVM::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ShadowVM::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SayTest(::grpc::ClientContext* context, const ::ShadowVM::TestRequest* request, ::ShadowVM::TestReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SayTest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ShadowVM::TestReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::ShadowVM::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::ShadowVM::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::TestReply>* AsyncSayTestRaw(::grpc::ClientContext* context, const ::ShadowVM::TestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::TestReply>* PrepareAsyncSayTestRaw(::grpc::ClientContext* context, const ::ShadowVM::TestRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::ShadowVM::HelloRequest& request, ::ShadowVM::HelloReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ShadowVM::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::ShadowVM::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ShadowVM::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ShadowVM::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::ShadowVM::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ShadowVM::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    ::grpc::Status SayTest(::grpc::ClientContext* context, const ::ShadowVM::TestRequest& request, ::ShadowVM::TestReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ShadowVM::TestReply>> AsyncSayTest(::grpc::ClientContext* context, const ::ShadowVM::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ShadowVM::TestReply>>(AsyncSayTestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ShadowVM::TestReply>> PrepareAsyncSayTest(::grpc::ClientContext* context, const ::ShadowVM::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ShadowVM::TestReply>>(PrepareAsyncSayTestRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SayHello(::grpc::ClientContext* context, const ::ShadowVM::HelloRequest* request, ::ShadowVM::HelloReply* response, std::function<void(::grpc::Status)>) override;
      void SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ShadowVM::HelloReply* response, std::function<void(::grpc::Status)>) override;
      void SayTest(::grpc::ClientContext* context, const ::ShadowVM::TestRequest* request, ::ShadowVM::TestReply* response, std::function<void(::grpc::Status)>) override;
      void SayTest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ShadowVM::TestReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ShadowVM::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::ShadowVM::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ShadowVM::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::ShadowVM::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ShadowVM::TestReply>* AsyncSayTestRaw(::grpc::ClientContext* context, const ::ShadowVM::TestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ShadowVM::TestReply>* PrepareAsyncSayTestRaw(::grpc::ClientContext* context, const ::ShadowVM::TestRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
    const ::grpc::internal::RpcMethod rpcmethod_SayTest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::ShadowVM::HelloRequest* request, ::ShadowVM::HelloReply* response);
    virtual ::grpc::Status SayTest(::grpc::ServerContext* context, const ::ShadowVM::TestRequest* request, ::ShadowVM::TestReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::ShadowVM::HelloRequest* request, ::ShadowVM::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::ShadowVM::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::ShadowVM::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SayTest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SayTest() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SayTest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayTest(::grpc::ServerContext* context, const ::ShadowVM::TestRequest* request, ::ShadowVM::TestReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayTest(::grpc::ServerContext* context, ::ShadowVM::TestRequest* request, ::grpc::ServerAsyncResponseWriter< ::ShadowVM::TestReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_SayTest<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SayHello() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::ShadowVM::HelloRequest, ::ShadowVM::HelloReply>(
          [this](::grpc::ServerContext* context,
                 const ::ShadowVM::HelloRequest* request,
                 ::ShadowVM::HelloReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SayHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::ShadowVM::HelloRequest* request, ::ShadowVM::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SayHello(::grpc::ServerContext* context, const ::ShadowVM::HelloRequest* request, ::ShadowVM::HelloReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SayTest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SayTest() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::ShadowVM::TestRequest, ::ShadowVM::TestReply>(
          [this](::grpc::ServerContext* context,
                 const ::ShadowVM::TestRequest* request,
                 ::ShadowVM::TestReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SayTest(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SayTest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayTest(::grpc::ServerContext* context, const ::ShadowVM::TestRequest* request, ::ShadowVM::TestReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SayTest(::grpc::ServerContext* context, const ::ShadowVM::TestRequest* request, ::ShadowVM::TestReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_SayHello<ExperimentalWithCallbackMethod_SayTest<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::ShadowVM::HelloRequest* request, ::ShadowVM::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SayTest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SayTest() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SayTest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayTest(::grpc::ServerContext* context, const ::ShadowVM::TestRequest* request, ::ShadowVM::TestReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SayHello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::ShadowVM::HelloRequest* request, ::ShadowVM::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayTest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SayTest() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SayTest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayTest(::grpc::ServerContext* context, const ::ShadowVM::TestRequest* request, ::ShadowVM::TestReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayTest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SayHello() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SayHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::ShadowVM::HelloRequest* request, ::ShadowVM::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SayHello(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SayTest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SayTest() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SayTest(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SayTest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayTest(::grpc::ServerContext* context, const ::ShadowVM::TestRequest* request, ::ShadowVM::TestReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SayTest(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::ShadowVM::HelloRequest, ::ShadowVM::HelloReply>(std::bind(&WithStreamedUnaryMethod_SayHello<BaseClass>::StreamedSayHello, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::ShadowVM::HelloRequest* request, ::ShadowVM::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ShadowVM::HelloRequest,::ShadowVM::HelloReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayTest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SayTest() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ShadowVM::TestRequest, ::ShadowVM::TestReply>(std::bind(&WithStreamedUnaryMethod_SayTest<BaseClass>::StreamedSayTest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SayTest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayTest(::grpc::ServerContext* context, const ::ShadowVM::TestRequest* request, ::ShadowVM::TestReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayTest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ShadowVM::TestRequest,::ShadowVM::TestReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_SayTest<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_SayTest<Service > > StreamedService;
};

class ShadowVMAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "ShadowVM.ShadowVMAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RunPipelineCMD(::grpc::ClientContext* context, const ::ShadowVM::PipelineInfo& request, ::ShadowVM::Ret* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::Ret>> AsyncRunPipelineCMD(::grpc::ClientContext* context, const ::ShadowVM::PipelineInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::Ret>>(AsyncRunPipelineCMDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::Ret>> PrepareAsyncRunPipelineCMD(::grpc::ClientContext* context, const ::ShadowVM::PipelineInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::Ret>>(PrepareAsyncRunPipelineCMDRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void RunPipelineCMD(::grpc::ClientContext* context, const ::ShadowVM::PipelineInfo* request, ::ShadowVM::Ret* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RunPipelineCMD(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ShadowVM::Ret* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::Ret>* AsyncRunPipelineCMDRaw(::grpc::ClientContext* context, const ::ShadowVM::PipelineInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ShadowVM::Ret>* PrepareAsyncRunPipelineCMDRaw(::grpc::ClientContext* context, const ::ShadowVM::PipelineInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RunPipelineCMD(::grpc::ClientContext* context, const ::ShadowVM::PipelineInfo& request, ::ShadowVM::Ret* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ShadowVM::Ret>> AsyncRunPipelineCMD(::grpc::ClientContext* context, const ::ShadowVM::PipelineInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ShadowVM::Ret>>(AsyncRunPipelineCMDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ShadowVM::Ret>> PrepareAsyncRunPipelineCMD(::grpc::ClientContext* context, const ::ShadowVM::PipelineInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ShadowVM::Ret>>(PrepareAsyncRunPipelineCMDRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RunPipelineCMD(::grpc::ClientContext* context, const ::ShadowVM::PipelineInfo* request, ::ShadowVM::Ret* response, std::function<void(::grpc::Status)>) override;
      void RunPipelineCMD(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ShadowVM::Ret* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ShadowVM::Ret>* AsyncRunPipelineCMDRaw(::grpc::ClientContext* context, const ::ShadowVM::PipelineInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ShadowVM::Ret>* PrepareAsyncRunPipelineCMDRaw(::grpc::ClientContext* context, const ::ShadowVM::PipelineInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RunPipelineCMD_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RunPipelineCMD(::grpc::ServerContext* context, const ::ShadowVM::PipelineInfo* request, ::ShadowVM::Ret* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RunPipelineCMD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RunPipelineCMD() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RunPipelineCMD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunPipelineCMD(::grpc::ServerContext* context, const ::ShadowVM::PipelineInfo* request, ::ShadowVM::Ret* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunPipelineCMD(::grpc::ServerContext* context, ::ShadowVM::PipelineInfo* request, ::grpc::ServerAsyncResponseWriter< ::ShadowVM::Ret>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RunPipelineCMD<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RunPipelineCMD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RunPipelineCMD() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::ShadowVM::PipelineInfo, ::ShadowVM::Ret>(
          [this](::grpc::ServerContext* context,
                 const ::ShadowVM::PipelineInfo* request,
                 ::ShadowVM::Ret* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RunPipelineCMD(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_RunPipelineCMD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunPipelineCMD(::grpc::ServerContext* context, const ::ShadowVM::PipelineInfo* request, ::ShadowVM::Ret* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RunPipelineCMD(::grpc::ServerContext* context, const ::ShadowVM::PipelineInfo* request, ::ShadowVM::Ret* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_RunPipelineCMD<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RunPipelineCMD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RunPipelineCMD() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RunPipelineCMD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunPipelineCMD(::grpc::ServerContext* context, const ::ShadowVM::PipelineInfo* request, ::ShadowVM::Ret* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunPipelineCMD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RunPipelineCMD() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RunPipelineCMD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunPipelineCMD(::grpc::ServerContext* context, const ::ShadowVM::PipelineInfo* request, ::ShadowVM::Ret* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunPipelineCMD(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RunPipelineCMD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RunPipelineCMD() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RunPipelineCMD(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RunPipelineCMD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunPipelineCMD(::grpc::ServerContext* context, const ::ShadowVM::PipelineInfo* request, ::ShadowVM::Ret* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RunPipelineCMD(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunPipelineCMD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RunPipelineCMD() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::ShadowVM::PipelineInfo, ::ShadowVM::Ret>(std::bind(&WithStreamedUnaryMethod_RunPipelineCMD<BaseClass>::StreamedRunPipelineCMD, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RunPipelineCMD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunPipelineCMD(::grpc::ServerContext* context, const ::ShadowVM::PipelineInfo* request, ::ShadowVM::Ret* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunPipelineCMD(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ShadowVM::PipelineInfo,::ShadowVM::Ret>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RunPipelineCMD<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RunPipelineCMD<Service > StreamedService;
};

}  // namespace ShadowVM


#endif  // GRPC_svm_2eproto__INCLUDED
